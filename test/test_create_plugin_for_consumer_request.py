# coding: utf-8

"""
    Kong Admin API

    OpenAPI 3.0 spec for Kong Gateway's open source Admin API.  You can know more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com) .Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.

    The version of the OpenAPI document: 3.5.0
    Contact: docs@konghq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from kong_admin_client.models.create_plugin_for_consumer_request import CreatePluginForConsumerRequest

class TestCreatePluginForConsumerRequest(unittest.TestCase):
    """CreatePluginForConsumerRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreatePluginForConsumerRequest:
        """Test CreatePluginForConsumerRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreatePluginForConsumerRequest`
        """
        model = CreatePluginForConsumerRequest()
        if include_optional:
            return CreatePluginForConsumerRequest(
                name = 'rate-limiting',
                route = '',
                service = '',
                consumer = '',
                instance_name = 'rate-limiting-foo',
                config = kong_admin_client.models.list_plugins_for_consumer_200_response_config.list_plugins_for_consumer_200_response_config(
                    hour = 500, 
                    minute = 500, ),
                protocols = [
                    'http'
                    ],
                enabled = True,
                tags = [
                    ''
                    ],
                ordering = kong_admin_client.models.list_plugins_for_consumer_200_response_ordering.list_plugins_for_consumer_200_response_ordering(
                    before = [
                        ''
                        ], )
            )
        else:
            return CreatePluginForConsumerRequest(
        )
        """

    def testCreatePluginForConsumerRequest(self):
        """Test CreatePluginForConsumerRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
