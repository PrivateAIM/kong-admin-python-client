# coding: utf-8

"""
    Kong Admin API

    OpenAPI 3.0 spec for Kong Gateway's open source Admin API.  You can know more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com) .Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.

    The version of the OpenAPI document: 3.5.0
    Contact: docs@konghq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kong_admin_client.api.plugins_api import PluginsApi


class TestPluginsApi(unittest.TestCase):
    """PluginsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = PluginsApi()

    def tearDown(self) -> None:
        pass

    def test_create_plugin(self) -> None:
        """Test case for create_plugin

        Create a new Plugin
        """
        pass

    def test_create_plugin_for_consumer(self) -> None:
        """Test case for create_plugin_for_consumer

        Create a new Plugin associated with a Consumer
        """
        pass

    def test_create_plugin_for_route(self) -> None:
        """Test case for create_plugin_for_route

        Create a new Plugin associated with a route
        """
        pass

    def test_create_plugin_for_service(self) -> None:
        """Test case for create_plugin_for_service

        Create a new Plugin associated with a service
        """
        pass

    def test_delete_plugin(self) -> None:
        """Test case for delete_plugin

        Delete a Plugin
        """
        pass

    def test_delete_plugin_for_a_service(self) -> None:
        """Test case for delete_plugin_for_a_service

        Delete a plugin associated with a service
        """
        pass

    def test_delete_plugin_for_consumer(self) -> None:
        """Test case for delete_plugin_for_consumer

        Delete a Plugin associated with a Consumer
        """
        pass

    def test_delete_plugin_for_route(self) -> None:
        """Test case for delete_plugin_for_route

        Delete a Plugin associated with a route
        """
        pass

    def test_fetch_plugin_for_consumer(self) -> None:
        """Test case for fetch_plugin_for_consumer

        Fetch a Plugin associated with a Consumer
        """
        pass

    def test_fetch_plugin_for_route(self) -> None:
        """Test case for fetch_plugin_for_route

        Fetch a Plugin associated with a route
        """
        pass

    def test_fetch_plugin_with_a_service(self) -> None:
        """Test case for fetch_plugin_with_a_service

        Fetch a Plugin associated with a service
        """
        pass

    def test_get_plugin(self) -> None:
        """Test case for get_plugin

        Fetch a Plugin
        """
        pass

    def test_get_plugins_for_service(self) -> None:
        """Test case for get_plugins_for_service

        List all Plugins associated with a service
        """
        pass

    def test_list_plugin(self) -> None:
        """Test case for list_plugin

        List all Plugins
        """
        pass

    def test_list_plugins_for_consumer(self) -> None:
        """Test case for list_plugins_for_consumer

        List all plugins associated with a consumer
        """
        pass

    def test_list_plugins_for_route(self) -> None:
        """Test case for list_plugins_for_route

        List all Plugins associated with a route
        """
        pass

    def test_update_plugin(self) -> None:
        """Test case for update_plugin

        Update a Plugin
        """
        pass

    def test_update_plugin_for_a_service(self) -> None:
        """Test case for update_plugin_for_a_service

        Update a plugin associated with a service
        """
        pass

    def test_update_plugin_for_consumer(self) -> None:
        """Test case for update_plugin_for_consumer

        Update a Plugin associated with a Consumer
        """
        pass

    def test_update_plugin_for_route(self) -> None:
        """Test case for update_plugin_for_route

        Update a Plugin associated with a route
        """
        pass

    def test_upsert_plugin(self) -> None:
        """Test case for upsert_plugin

        Upsert a Plugin
        """
        pass

    def test_upsert_plugin_for_a_service(self) -> None:
        """Test case for upsert_plugin_for_a_service

        Upsert a plugin associated with a service
        """
        pass

    def test_upsert_plugin_for_consumer(self) -> None:
        """Test case for upsert_plugin_for_consumer

        Upsert a Plugin associated with a Consumer
        """
        pass

    def test_upsert_plugin_for_route(self) -> None:
        """Test case for upsert_plugin_for_route

        Upsert a Plugin associated with a route
        """
        pass


if __name__ == '__main__':
    unittest.main()
