# coding: utf-8

"""
    Kong Admin API

    OpenAPI 3.0 spec for Kong Gateway's open source Admin API.  You can know more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com) .Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.

    The version of the OpenAPI document: 3.5.0
    Contact: docs@konghq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from kong_admin_client.models.create_upstream_request import CreateUpstreamRequest

class TestCreateUpstreamRequest(unittest.TestCase):
    """CreateUpstreamRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateUpstreamRequest:
        """Test CreateUpstreamRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateUpstreamRequest`
        """
        model = CreateUpstreamRequest()
        if include_optional:
            return CreateUpstreamRequest(
                name = 'my-upstream',
                algorithm = 'round-robin',
                hash_on = 'none',
                hash_fallback = 'none',
                hash_on_header = 'none',
                hash_fallback_header = 'none',
                hash_on_cookie = 'none',
                hash_on_cookie_path = '/',
                hash_on_query_arg = 'hash_value',
                hash_fallback_query_arg = 'hash_value',
                hash_on_uri_capture = 'hash_value',
                hash_fallback_uri_capture = 'hash_value',
                slots = 5000,
                healthchecks = kong_admin_client.models.create_upstream_request_healthchecks.create_upstream_request_healthchecks(
                    passive = kong_admin_client.models.create_upstream_request_healthchecks_passive.create_upstream_request_healthchecks_passive(
                        type = 'http', 
                        healthy = kong_admin_client.models.create_upstream_request_healthchecks_passive_healthy.create_upstream_request_healthchecks_passive_healthy(
                            http_statuses = [200,201,202], 
                            successes = 2, ), 
                        unhealthy = kong_admin_client.models.create_upstream_request_healthchecks_passive_unhealthy.create_upstream_request_healthchecks_passive_unhealthy(
                            http_statuses = [500,503], 
                            timeouts = 1, 
                            http_failures = 3, 
                            tcp_failures = 1, ), ), 
                    active = kong_admin_client.models.create_upstream_request_healthchecks_active.create_upstream_request_healthchecks_active(
                        https_verify_certificate = True, 
                        type = 'http', 
                        concurrency = 5, 
                        headers = {"x-my-header":["foo","bar"],"x-another-header":["bla"]}, 
                        timeout = 5, 
                        http_path = '/', 
                        https_sni = '', ), 
                    threshold = 0, ),
                tags = ["user-level","low-priority"],
                host_header = '',
                client_certificate = kong_admin_client.models.create_upstream_request_client_certificate.create_upstream_request_client_certificate(
                    id = 'ea29aaa3-3b2d-488c-b90c-56df8e0dd8c6', ),
                use_srv_name = False
            )
        else:
            return CreateUpstreamRequest(
                name = 'my-upstream',
        )
        """

    def testCreateUpstreamRequest(self):
        """Test CreateUpstreamRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
