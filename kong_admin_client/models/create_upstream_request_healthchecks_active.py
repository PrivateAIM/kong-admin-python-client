# coding: utf-8

"""
    Kong Admin API

    OpenAPI 3.0 spec for Kong Gateway's open source Admin API.  You can know more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com) .Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.

    The version of the OpenAPI document: 3.5.0
    Contact: docs@konghq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from kong_admin_client.models.create_upstream_request_healthchecks_active_healthy import CreateUpstreamRequestHealthchecksActiveHealthy
from kong_admin_client.models.create_upstream_request_healthchecks_active_unhealthy import CreateUpstreamRequestHealthchecksActiveUnhealthy
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateUpstreamRequestHealthchecksActive(BaseModel):
    """
    CreateUpstreamRequestHealthchecksActive
    """ # noqa: E501
    https_verify_certificate: Optional[StrictBool] = None
    healthy: Optional[CreateUpstreamRequestHealthchecksActiveHealthy] = None
    unhealthy: Optional[CreateUpstreamRequestHealthchecksActiveUnhealthy] = None
    type: Optional[StrictStr] = Field(default='http', description="Whether to perform active health checks using HTTP or HTTPS, or just attempt a TCP connection.")
    concurrency: Optional[StrictInt] = Field(default=10, description="Number of targets to check concurrently in active health checks.")
    headers: Optional[Dict[str, Any]] = Field(default=None, description="One or more lists of values indexed by header name to use in GET HTTP request to run as a probe on active health checks. Values must be pre-formatted.")
    timeout: Optional[StrictInt] = Field(default=1, description="Socket timeout for active health checks (in seconds).")
    http_path: Optional[StrictStr] = Field(default='/', description="Path to use in GET HTTP request to run as a probe on active health checks.")
    https_sni: Optional[StrictStr] = Field(default=None, description="The hostname to use as an SNI (Server Name Identification) when performing active health checks using HTTPS. This is particularly useful when Targets are configured using IPs, so that the target host's certificate can be verified with the proper SNI.")
    __properties: ClassVar[List[str]] = ["https_verify_certificate", "healthy", "unhealthy", "type", "concurrency", "headers", "timeout", "http_path", "https_sni"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('tcp', 'http', 'https', 'grpc', 'grpcs'):
            raise ValueError("must be one of enum values ('tcp', 'http', 'https', 'grpc', 'grpcs')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateUpstreamRequestHealthchecksActive from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of healthy
        if self.healthy:
            _dict['healthy'] = self.healthy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unhealthy
        if self.unhealthy:
            _dict['unhealthy'] = self.unhealthy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateUpstreamRequestHealthchecksActive from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "https_verify_certificate": obj.get("https_verify_certificate"),
            "healthy": CreateUpstreamRequestHealthchecksActiveHealthy.from_dict(obj.get("healthy")) if obj.get("healthy") is not None else None,
            "unhealthy": CreateUpstreamRequestHealthchecksActiveUnhealthy.from_dict(obj.get("unhealthy")) if obj.get("unhealthy") is not None else None,
            "type": obj.get("type") if obj.get("type") is not None else 'http',
            "concurrency": obj.get("concurrency") if obj.get("concurrency") is not None else 10,
            "headers": obj.get("headers"),
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else 1,
            "http_path": obj.get("http_path") if obj.get("http_path") is not None else '/',
            "https_sni": obj.get("https_sni")
        })
        return _obj


