# coding: utf-8

"""
    Kong Admin API

    OpenAPI 3.0 spec for Kong Gateway's open source Admin API.  You can know more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com) .Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.

    The version of the OpenAPI document: 3.5.0
    Contact: docs@konghq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetTimers200ResponseStatsSys(BaseModel):
    """
    List of the number of different type of timers
    """ # noqa: E501
    total: Optional[StrictInt] = Field(default=7, description="The total number of timers (running + pending + waiting)")
    waiting: Optional[StrictInt] = Field(default=7, description="The number of unexpired timers")
    runs: Optional[StrictInt] = Field(default=7, description="The total number of runs for the timers")
    pending: Optional[StrictInt] = Field(default=0, description="The number of pending timers")
    running: Optional[StrictInt] = Field(default=0, description="The number of running timers")
    __properties: ClassVar[List[str]] = ["total", "waiting", "runs", "pending", "running"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetTimers200ResponseStatsSys from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetTimers200ResponseStatsSys from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total": obj.get("total") if obj.get("total") is not None else 7,
            "waiting": obj.get("waiting") if obj.get("waiting") is not None else 7,
            "runs": obj.get("runs") if obj.get("runs") is not None else 7,
            "pending": obj.get("pending") if obj.get("pending") is not None else 0,
            "running": obj.get("running") if obj.get("running") is not None else 0
        })
        return _obj


