# coding: utf-8

"""
    Kong Admin API

    OpenAPI 3.0 spec for Kong Gateway's open source Admin API.  You can know more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com) .Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.

    The version of the OpenAPI document: 3.5.0
    Contact: docs@konghq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from kong_admin_client.models.create_route_request_destinations_inner import CreateRouteRequestDestinationsInner
from kong_admin_client.models.create_route_request_headers import CreateRouteRequestHeaders
from kong_admin_client.models.create_route_request_service import CreateRouteRequestService
from kong_admin_client.models.create_route_request_sources_inner import CreateRouteRequestSourcesInner
from typing import Optional, Set
from typing_extensions import Self

class CreateRouteRequest(BaseModel):
    """
    CreateRouteRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the route. Route names must be unique, and they are case sensitive. For example, there can be two different routes named \"test\" and \"Test\". ")
    protocols: List[StrictStr] = Field(description="An array of the protocols this route should allow")
    methods: Optional[List[StrictStr]] = Field(default=None, description="A list of HTTP methods that match this route. ")
    hosts: Optional[List[StrictStr]] = Field(default=None, description="A list of domain names that match this route. Note that the hosts value is case sensitive. With form-encoded, the notation is `hosts[]=example.com&hosts[]=foo.test`. With JSON, use an Array.")
    paths: Optional[List[StrictStr]] = Field(default=None, description="A list of paths that match this route. With form-encoded, the notation is `paths[]=/foo&paths[]=/bar`. With JSON, use an array. The path can be a regular expression, or a plain text pattern.")
    headers: Optional[CreateRouteRequestHeaders] = None
    https_redirect_status_code: StrictInt = Field(description="The status code Kong responds with when all properties of a route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS` Location header is injected by Kong if the field is set to `301`, `302`, `307` or `308`. Note: This config applies only if the route is configured to only accept the https protocol. Accepted values are: `426`, `301`, `302`, `307`, `308`. Default: `426`.")
    regex_priority: Optional[StrictInt] = Field(default=0, description="A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same regex_priority, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).")
    strip_path: Optional[StrictBool] = Field(default=True, description="When matching a route via one of the paths, strip the matching prefix from the upstream request URL.")
    path_handling: Optional[StrictStr] = Field(default=None, description="Controls how the service path, route path and requested path are combined when sending a request to the upstream. Accepted values are \"`v0`\", \"`v1`\".")
    preserve_host: StrictBool = Field(description="When matching a route via one of the `hosts` domain names, use the request `host` header in the upstream request headers. If set to `false`, the upstream Host header will be that of the service's host. ")
    request_buffering: StrictBool = Field(description="Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding. Default: true. ")
    response_buffering: StrictBool = Field(description="Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding. Default: `true`. ")
    snis: Optional[List[StrictStr]] = Field(default=None, description="A list of SNIs that match this route when using stream routing. ")
    sources: Optional[List[CreateRouteRequestSourcesInner]] = Field(default=None, description="A list of IP sources of incoming connections that match this route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\". ")
    destinations: Optional[List[CreateRouteRequestDestinationsInner]] = Field(default=None, description="A list of IP destinations of incoming connections that match this route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\". ")
    tags: Optional[List[StrictStr]] = Field(default=None, description="An optional set of strings associated with the route for grouping and filtering. ")
    service: Optional[CreateRouteRequestService] = None
    __properties: ClassVar[List[str]] = ["name", "protocols", "methods", "hosts", "paths", "headers", "https_redirect_status_code", "regex_priority", "strip_path", "path_handling", "preserve_host", "request_buffering", "response_buffering", "snis", "sources", "destinations", "tags", "service"]

    @field_validator('https_redirect_status_code')
    def https_redirect_status_code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([426, 301, 302, 307, 308]):
            raise ValueError("must be one of enum values (426, 301, 302, 307, 308)")
        return value

    @field_validator('path_handling')
    def path_handling_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['v1', 'v0']):
            raise ValueError("must be one of enum values ('v1', 'v0')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateRouteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of headers
        if self.headers:
            _dict['headers'] = self.headers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item in self.sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item in self.destinations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['destinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of service
        if self.service:
            _dict['service'] = self.service.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateRouteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "protocols": obj.get("protocols"),
            "methods": obj.get("methods"),
            "hosts": obj.get("hosts"),
            "paths": obj.get("paths"),
            "headers": CreateRouteRequestHeaders.from_dict(obj["headers"]) if obj.get("headers") is not None else None,
            "https_redirect_status_code": obj.get("https_redirect_status_code") if obj.get("https_redirect_status_code") is not None else 426,
            "regex_priority": obj.get("regex_priority") if obj.get("regex_priority") is not None else 0,
            "strip_path": obj.get("strip_path") if obj.get("strip_path") is not None else True,
            "path_handling": obj.get("path_handling"),
            "preserve_host": obj.get("preserve_host") if obj.get("preserve_host") is not None else True,
            "request_buffering": obj.get("request_buffering") if obj.get("request_buffering") is not None else True,
            "response_buffering": obj.get("response_buffering") if obj.get("response_buffering") is not None else True,
            "snis": obj.get("snis"),
            "sources": [CreateRouteRequestSourcesInner.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None,
            "destinations": [CreateRouteRequestDestinationsInner.from_dict(_item) for _item in obj["destinations"]] if obj.get("destinations") is not None else None,
            "tags": obj.get("tags"),
            "service": CreateRouteRequestService.from_dict(obj["service"]) if obj.get("service") is not None else None
        })
        return _obj


