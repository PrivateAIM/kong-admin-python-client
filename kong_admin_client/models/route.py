# coding: utf-8

"""
    Kong Admin API

    OpenAPI 3.0 spec for Kong Gateway's open source Admin API.  You can know more about Kong Gateway at [docs.konghq.com](https://docs.konghq.com) .Give Kong a star at [Kong/kong](https://github.com/kong/kong) repository.

    The version of the OpenAPI document: 3.5.0
    Contact: docs@konghq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kong_admin_client.models.route_destinations_inner import RouteDestinationsInner
from kong_admin_client.models.route_service import RouteService
from typing import Optional, Set
from typing_extensions import Self

class Route(BaseModel):
    """
    Route entities define rules to match client requests. Every request matching a given route will be proxied to its associated service.
    """ # noqa: E501
    created_at: Optional[StrictInt] = Field(default=None, description="Unix epoch when the resource was created.")
    destinations: Optional[List[RouteDestinationsInner]] = Field(default=None, description="A list of IP destinations of incoming connections that match this route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".")
    headers: Optional[Dict[str, Any]] = Field(default=None, description="One or more lists of values indexed by header name that will cause this route to match if present in the request. The `Host` header cannot be used with this hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.")
    hosts: Optional[List[StrictStr]] = Field(default=None, description="A list of domain names that match this route. Note that the hosts value is case sensitive.")
    https_redirect_status_code: Optional[StrictInt] = Field(default=426, description="The status code Kong responds with when all properties of a route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. This config applies only if the route is configured to only accept the `https` protocol.")
    id: Optional[StrictStr] = None
    methods: Optional[List[StrictStr]] = Field(default=None, description="A list of HTTP methods that match this route.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the route. Route names must be unique, and they are case sensitive. For example, there can be two different routes named \"test\" and \"Test\".")
    path_handling: Optional[StrictStr] = Field(default='v0', description="Controls how the service path, route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.")
    paths: Optional[List[StrictStr]] = Field(default=None, description="A list of paths that match this route.")
    preserve_host: Optional[StrictBool] = Field(default=False, description="When matching a route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the services `host`.")
    protocols: Optional[List[StrictStr]] = Field(default=None, description="An array of the protocols this route should allow. See the [route Object](#route-object) section for a list of accepted protocols. When set to only `\"https\"`, HTTP requests are answered with an upgrade error. When set to only `\"http\"`, HTTPS requests are answered with an error.")
    regex_priority: Optional[StrictInt] = Field(default=0, description="A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).")
    request_buffering: Optional[StrictBool] = Field(default=True, description="Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.")
    response_buffering: Optional[StrictBool] = Field(default=True, description="Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.")
    service: Optional[RouteService] = None
    snis: Optional[List[StrictStr]] = Field(default=None, description="A list of SNIs that match this route when using stream routing.")
    sources: Optional[List[RouteDestinationsInner]] = Field(default=None, description="A list of IP sources of incoming connections that match this route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".")
    strip_path: Optional[StrictBool] = Field(default=True, description="When matching a route via one of the `paths`, strip the matching prefix from the upstream request URL.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="An optional set of strings associated with the route for grouping and filtering.")
    updated_at: Optional[StrictInt] = Field(default=None, description="Unix epoch when the resource was last updated.")
    __properties: ClassVar[List[str]] = ["created_at", "destinations", "headers", "hosts", "https_redirect_status_code", "id", "methods", "name", "path_handling", "paths", "preserve_host", "protocols", "regex_priority", "request_buffering", "response_buffering", "service", "snis", "sources", "strip_path", "tags", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Route from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item in self.destinations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['destinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of service
        if self.service:
            _dict['service'] = self.service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item in self.sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Route from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "destinations": [RouteDestinationsInner.from_dict(_item) for _item in obj["destinations"]] if obj.get("destinations") is not None else None,
            "headers": obj.get("headers"),
            "hosts": obj.get("hosts"),
            "https_redirect_status_code": obj.get("https_redirect_status_code") if obj.get("https_redirect_status_code") is not None else 426,
            "id": obj.get("id"),
            "methods": obj.get("methods"),
            "name": obj.get("name"),
            "path_handling": obj.get("path_handling") if obj.get("path_handling") is not None else 'v0',
            "paths": obj.get("paths"),
            "preserve_host": obj.get("preserve_host") if obj.get("preserve_host") is not None else False,
            "protocols": obj.get("protocols"),
            "regex_priority": obj.get("regex_priority") if obj.get("regex_priority") is not None else 0,
            "request_buffering": obj.get("request_buffering") if obj.get("request_buffering") is not None else True,
            "response_buffering": obj.get("response_buffering") if obj.get("response_buffering") is not None else True,
            "service": RouteService.from_dict(obj["service"]) if obj.get("service") is not None else None,
            "snis": obj.get("snis"),
            "sources": [RouteDestinationsInner.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None,
            "strip_path": obj.get("strip_path") if obj.get("strip_path") is not None else True,
            "tags": obj.get("tags"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


